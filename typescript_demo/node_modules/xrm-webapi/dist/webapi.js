"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.batchOperation = exports.unboundFunction = exports.boundFunction = exports.unboundAction = exports.boundAction = exports.disassociate = exports.associate = exports.deleteProperty = exports.deleteRecord = exports.updateProperty = exports.updateWithReturnData = exports.update = exports.createWithReturnData = exports.create = exports.retrieveMultipleNextPage = exports.retrieveMultiple = exports.retrieve = exports.getHeaders = void 0;
function getHeaders(config) {
    var headers = {};
    headers.Accept = 'application/json';
    headers['OData-MaxVersion'] = '4.0';
    headers['OData-Version'] = '4.0';
    headers['Content-Type'] = config.contentType;
    if (config.apiConfig.accessToken != null) {
        headers.Authorization = "Bearer " + config.apiConfig.accessToken;
    }
    if (config.queryOptions != null && typeof (config.queryOptions) !== 'undefined') {
        headers.Prefer = getPreferHeader(config.queryOptions);
        if (config.queryOptions.impersonateUserId != null) {
            headers.MSCRMCallerID = config.queryOptions.impersonateUserId;
        }
    }
    return headers;
}
exports.getHeaders = getHeaders;
function getPreferHeader(queryOptions) {
    var prefer = [];
    // add max page size to prefer request header
    if (queryOptions.maxPageSize) {
        prefer.push("odata.maxpagesize=" + queryOptions.maxPageSize);
    }
    // add formatted values to prefer request header
    if (queryOptions.representation) {
        prefer.push('return=representation');
    }
    else if (queryOptions.includeFormattedValues && queryOptions.includeLookupLogicalNames &&
        queryOptions.includeAssociatedNavigationProperties) {
        prefer.push('odata.include-annotations="*"');
    }
    else {
        var preferExtra = [
            queryOptions.includeFormattedValues ? 'OData.Community.Display.V1.FormattedValue' : '',
            queryOptions.includeLookupLogicalNames ? 'Microsoft.Dynamics.CRM.lookuplogicalname' : '',
            queryOptions.includeAssociatedNavigationProperties
                ? 'Microsoft.Dynamics.CRM.associatednavigationproperty' : '',
        ].filter(function (v) {
            return v !== '';
        }).join(',');
        prefer.push('odata.include-annotations="' + preferExtra + '"');
    }
    return prefer.join(',');
}
function getFunctionInputs(queryString, inputs) {
    if (inputs == null) {
        return queryString + ')';
    }
    var aliases = [];
    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
        var input = inputs_1[_i];
        queryString += input.name;
        if (input.alias) {
            queryString += "=@" + input.alias + ",";
            aliases.push("@" + input.alias + "=" + input.value);
        }
        else {
            queryString += "=" + input.value + ",";
        }
    }
    queryString = queryString.substr(0, queryString.length - 1) + ')';
    if (aliases.length > 0) {
        queryString += "?" + aliases.join('&');
    }
    return queryString;
}
function handleError(result) {
    try {
        return JSON.parse(result).error;
    }
    catch (e) {
        return new Error('Unexpected Error');
    }
}
/**
 * Retrieve a record from CRM
 * @param apiConfig WebApiConfig object
 * @param entityType Type of entity to retrieve
 * @param id Id of record to retrieve
 * @param queryString OData query string parameters
 * @param queryOptions Various query options for the query
 */
function retrieve(apiConfig, entitySet, id, submitRequest, queryString, queryOptions) {
    if (queryString != null && !/^[?]/.test(queryString)) {
        queryString = "?" + queryString;
    }
    var query = (queryString != null) ? entitySet + "(" + id + ")" + queryString : entitySet + "(" + id + ")";
    var config = {
        method: 'GET',
        contentType: 'application/json; charset=utf-8',
        queryString: query,
        apiConfig: apiConfig,
        queryOptions: queryOptions
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                resolve(JSON.parse(result.response));
            }
        });
    });
}
exports.retrieve = retrieve;
/**
 * Retrieve multiple records from CRM
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to retrieve
 * @param queryString OData query string parameters
 * @param queryOptions Various query options for the query
 */
function retrieveMultiple(apiConfig, entitySet, submitRequest, queryString, queryOptions) {
    if (queryString != null && !/^[?]/.test(queryString)) {
        queryString = "?" + queryString;
    }
    var query = (queryString != null) ? entitySet + queryString : entitySet;
    var config = {
        method: 'GET',
        contentType: 'application/json; charset=utf-8',
        queryString: query,
        apiConfig: apiConfig,
        queryOptions: queryOptions
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                resolve(JSON.parse(result.response));
            }
        });
    });
}
exports.retrieveMultiple = retrieveMultiple;
/**
 * Retrieve next page from a retrieveMultiple request
 * @param apiConfig WebApiConfig object
 * @param url Query from the @odata.nextlink property of a retrieveMultiple
 * @param queryOptions Various query options for the query
 */
function retrieveMultipleNextPage(apiConfig, url, submitRequest, queryOptions) {
    apiConfig.url = url;
    var config = {
        method: 'GET',
        contentType: 'application/json; charset=utf-8',
        queryString: '',
        apiConfig: apiConfig,
        queryOptions: queryOptions
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                resolve(JSON.parse(result.response));
            }
        });
    });
}
exports.retrieveMultipleNextPage = retrieveMultipleNextPage;
/**
 * Create a record in CRM
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to create
 * @param entity Entity to create
 * @param queryOptions Various query options for the query
 */
function create(apiConfig, entitySet, entity, submitRequest, queryOptions) {
    var config = {
        method: 'POST',
        contentType: 'application/json; charset=utf-8',
        queryString: entitySet,
        body: JSON.stringify(entity),
        apiConfig: apiConfig,
        queryOptions: queryOptions
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                resolve();
            }
        });
    });
}
exports.create = create;
/**
 * Create a record in CRM and return data
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to create
 * @param entity Entity to create
 * @param select Select odata query parameter
 * @param queryOptions Various query options for the query
 */
function createWithReturnData(apiConfig, entitySet, entity, select, submitRequest, queryOptions) {
    if (select != null && !/^[?]/.test(select)) {
        select = "?" + select;
    }
    // set representation
    if (queryOptions == null) {
        queryOptions = {};
    }
    queryOptions.representation = true;
    var config = {
        method: 'POST',
        contentType: 'application/json; charset=utf-8',
        queryString: entitySet + select,
        body: JSON.stringify(entity),
        apiConfig: apiConfig,
        queryOptions: queryOptions
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                resolve(JSON.parse(result.response));
            }
        });
    });
}
exports.createWithReturnData = createWithReturnData;
/**
 * Update a record in CRM
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to update
 * @param id Id of record to update
 * @param entity Entity fields to update
 * @param queryOptions Various query options for the query
 */
function update(apiConfig, entitySet, id, entity, submitRequest, queryOptions) {
    var config = {
        method: 'PATCH',
        contentType: 'application/json; charset=utf-8',
        queryString: entitySet + "(" + id + ")",
        body: JSON.stringify(entity),
        apiConfig: apiConfig,
        queryOptions: queryOptions
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                resolve();
            }
        });
    });
}
exports.update = update;
/**
 * Create a record in CRM and return data
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to create
 * @param id Id of record to update
 * @param entity Entity fields to update
 * @param select Select odata query parameter
 * @param queryOptions Various query options for the query
 */
function updateWithReturnData(apiConfig, entitySet, id, entity, select, submitRequest, queryOptions) {
    if (select != null && !/^[?]/.test(select)) {
        select = "?" + select;
    }
    // set representation
    if (queryOptions == null) {
        queryOptions = {};
    }
    queryOptions.representation = true;
    var config = {
        method: 'PATCH',
        contentType: 'application/json; charset=utf-8',
        queryString: entitySet + "(" + id + ")" + select,
        body: JSON.stringify(entity),
        apiConfig: apiConfig,
        queryOptions: queryOptions
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                resolve(JSON.parse(result.response));
            }
        });
    });
}
exports.updateWithReturnData = updateWithReturnData;
/**
 * Update a single property of a record in CRM
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to update
 * @param id Id of record to update
 * @param attribute Attribute to update
 * @param queryOptions Various query options for the query
 */
function updateProperty(apiConfig, entitySet, id, attribute, value, submitRequest, queryOptions) {
    var config = {
        method: 'PUT',
        contentType: 'application/json; charset=utf-8',
        queryString: entitySet + "(" + id + ")/" + attribute,
        body: JSON.stringify({ value: value }),
        apiConfig: apiConfig,
        queryOptions: queryOptions
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                resolve();
            }
        });
    });
}
exports.updateProperty = updateProperty;
/**
 * Delete a record from CRM
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to delete
 * @param id Id of record to delete
 */
function deleteRecord(apiConfig, entitySet, id, submitRequest) {
    var config = {
        method: 'DELETE',
        contentType: 'application/json; charset=utf-8',
        queryString: entitySet + "(" + id + ")",
        apiConfig: apiConfig
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                resolve();
            }
        });
    });
}
exports.deleteRecord = deleteRecord;
/**
 * Delete a property from a record in CRM. Non navigation properties only
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to update
 * @param id Id of record to update
 * @param attribute Attribute to delete
 */
function deleteProperty(apiConfig, entitySet, id, attribute, submitRequest) {
    var queryString = "/" + attribute;
    var config = {
        method: 'DELETE',
        contentType: 'application/json; charset=utf-8',
        queryString: entitySet + "(" + id + ")" + queryString,
        apiConfig: apiConfig
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                resolve();
            }
        });
    });
}
exports.deleteProperty = deleteProperty;
/**
 * Associate two records
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity for primary record
 * @param id Id of primary record
 * @param relationship Schema name of relationship
 * @param relatedEntitySet Type of entity for secondary record
 * @param relatedEntityId Id of secondary record
 * @param queryOptions Various query options for the query
 */
function associate(apiConfig, entitySet, id, relationship, relatedEntitySet, relatedEntityId, submitRequest, queryOptions) {
    var related = {
        '@odata.id': apiConfig.url + "/" + relatedEntitySet + "(" + relatedEntityId + ")"
    };
    var config = {
        method: 'POST',
        contentType: 'application/json; charset=utf-8',
        queryString: entitySet + "(" + id + ")/" + relationship + "/$ref",
        body: JSON.stringify(related),
        apiConfig: apiConfig,
        queryOptions: queryOptions
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                resolve();
            }
        });
    });
}
exports.associate = associate;
/**
 * Disassociate two records
 * @param apiConfig WebApiConfig obje
 * @param entitySet Type of entity for primary record
 * @param id  Id of primary record
 * @param property Schema name of property or relationship
 * @param relatedEntityId Id of secondary record. Only needed for collection-valued navigation properties
 */
function disassociate(apiConfig, entitySet, id, property, submitRequest, relatedEntityId) {
    var queryString = property;
    if (relatedEntityId != null) {
        queryString += "(" + relatedEntityId + ")";
    }
    queryString += '/$ref';
    var config = {
        method: 'DELETE',
        contentType: 'application/json; charset=utf-8',
        queryString: entitySet + "(" + id + ")/" + queryString,
        apiConfig: apiConfig
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                resolve();
            }
        });
    });
}
exports.disassociate = disassociate;
/**
 * Execute a default or custom bound action in CRM
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to run the action against
 * @param id Id of record to run the action against
 * @param actionName Name of the action to run
 * @param inputs Any inputs required by the action
 * @param queryOptions Various query options for the query
 */
function boundAction(apiConfig, entitySet, id, actionName, submitRequest, inputs, queryOptions) {
    var config = {
        method: 'POST',
        contentType: 'application/json; charset=utf-8',
        queryString: entitySet + "(" + id + ")/Microsoft.Dynamics.CRM." + actionName,
        apiConfig: apiConfig,
        queryOptions: queryOptions
    };
    if (inputs != null) {
        config.body = JSON.stringify(inputs);
    }
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                if (result.response) {
                    resolve(JSON.parse(result.response));
                }
                else {
                    resolve();
                }
            }
        });
    });
}
exports.boundAction = boundAction;
/**
 * Execute a default or custom unbound action in CRM
 * @param apiConfig WebApiConfig object
 * @param actionName Name of the action to run
 * @param inputs Any inputs required by the action
 * @param queryOptions Various query options for the query
 */
function unboundAction(apiConfig, actionName, submitRequest, inputs, queryOptions) {
    var config = {
        method: 'POST',
        contentType: 'application/json; charset=utf-8',
        queryString: actionName,
        apiConfig: apiConfig,
        queryOptions: queryOptions
    };
    if (inputs != null) {
        config.body = JSON.stringify(inputs);
    }
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                if (result.response) {
                    resolve(JSON.parse(result.response));
                }
                else {
                    resolve();
                }
            }
        });
    });
}
exports.unboundAction = unboundAction;
/**
 * Execute a default or custom bound action in CRM
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to run the action against
 * @param id Id of record to run the action against
 * @param functionName Name of the action to run
 * @param inputs Any inputs required by the action
 * @param queryOptions Various query options for the query
 */
function boundFunction(apiConfig, entitySet, id, functionName, submitRequest, inputs, queryOptions) {
    var queryString = entitySet + "(" + id + ")/Microsoft.Dynamics.CRM." + functionName + "(";
    queryString = getFunctionInputs(queryString, inputs);
    var config = {
        method: 'GET',
        contentType: 'application/json; charset=utf-8',
        queryString: queryString,
        apiConfig: apiConfig,
        queryOptions: queryOptions
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                if (result.response) {
                    resolve(JSON.parse(result.response));
                }
                else {
                    resolve();
                }
            }
        });
    });
}
exports.boundFunction = boundFunction;
/**
 * Execute an unbound function in CRM
 * @param apiConfig WebApiConfig object
 * @param functionName Name of the action to run
 * @param inputs Any inputs required by the action
 * @param queryOptions Various query options for the query
 */
function unboundFunction(apiConfig, functionName, submitRequest, inputs, queryOptions) {
    var queryString = functionName + "(";
    queryString = getFunctionInputs(queryString, inputs);
    var config = {
        method: 'GET',
        contentType: 'application/json; charset=utf-8',
        queryString: queryString,
        apiConfig: apiConfig,
        queryOptions: queryOptions
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                if (result.response) {
                    resolve(JSON.parse(result.response));
                }
                else {
                    resolve();
                }
            }
        });
    });
}
exports.unboundFunction = unboundFunction;
/**
 * Execute a batch operation in CRM
 * @param apiConfig WebApiConfig object
 * @param batchId Unique batch id for the operation
 * @param changeSetId Unique change set id for any changesets in the operation
 * @param changeSets Array of change sets (create or update) for the operation
 * @param batchGets Array of get requests for the operation
 * @param queryOptions Various query options for the query
 */
function batchOperation(apiConfig, batchId, changeSetId, changeSets, batchGets, submitRequest, queryOptions) {
    // build post body
    var body = [];
    if (changeSets.length > 0) {
        body.push("--batch_" + batchId);
        body.push("Content-Type: multipart/mixed;boundary=changeset_" + changeSetId);
        body.push('');
    }
    // push change sets to body
    for (var i = 0; i < changeSets.length; i++) {
        body.push("--changeset_" + changeSetId);
        body.push('Content-Type: application/http');
        body.push('Content-Transfer-Encoding:binary');
        body.push("Content-ID: " + (i + 1));
        body.push('');
        body.push(changeSets[i].method + " " + apiConfig.url + "/" + changeSets[i].queryString + " HTTP/1.1");
        body.push('Content-Type: application/json;type=entry');
        body.push('');
        body.push(JSON.stringify(changeSets[i].entity));
    }
    if (changeSets.length > 0) {
        body.push("--changeset_" + changeSetId + "--");
        body.push('');
    }
    // push get requests to body
    for (var _i = 0, batchGets_1 = batchGets; _i < batchGets_1.length; _i++) {
        var get = batchGets_1[_i];
        body.push("--batch_" + batchId);
        body.push('Content-Type: application/http');
        body.push('Content-Transfer-Encoding:binary');
        body.push('');
        body.push("GET " + apiConfig.url + "/" + get + " HTTP/1.1");
        body.push('Accept: application/json');
        body.push('');
    }
    if (batchGets.length > 0) {
        body.push('');
    }
    body.push("--batch_" + batchId + "--");
    var config = {
        method: 'POST',
        contentType: "multipart/mixed;boundary=batch_" + batchId,
        queryString: '$batch',
        body: body.join('\r\n'),
        apiConfig: apiConfig,
        queryOptions: queryOptions
    };
    return new Promise(function (resolve, reject) {
        submitRequest(config, function (result) {
            if (result.error) {
                reject(handleError(result.response));
            }
            else {
                if (result.response) {
                    resolve(result.response);
                }
                else {
                    resolve();
                }
            }
        });
    });
}
exports.batchOperation = batchOperation;
