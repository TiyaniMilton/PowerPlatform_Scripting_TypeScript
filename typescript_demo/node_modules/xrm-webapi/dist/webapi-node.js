"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.batchOperation = exports.unboundFunction = exports.boundFunction = exports.unboundAction = exports.boundAction = exports.disassociate = exports.associate = exports.deleteProperty = exports.deleteRecord = exports.updateProperty = exports.updateWithReturnData = exports.update = exports.createWithReturnData = exports.create = exports.retrieveMultipleNextPage = exports.retrieveMultiple = exports.retrieve = void 0;
// tslint:disable-next-line: ordered-imports
var https_1 = require("https");
var url = require("url");
var webApi = require("./webapi");
function submitRequest(requestConfig, callback) {
    var apiUrl = new url.URL(requestConfig.apiConfig.url + "/" + requestConfig.queryString);
    var headers = webApi.getHeaders(requestConfig);
    var options = {
        hostname: apiUrl.hostname,
        path: "" + apiUrl.pathname + apiUrl.search,
        method: requestConfig.method,
        headers: headers
    };
    if (requestConfig.body) {
        options.headers['Content-Length'] = requestConfig.body.length;
    }
    var req = https_1.request(options, function (result) {
        var body = '';
        result.setEncoding('utf8');
        result.on('data', function (chunk) {
            body += chunk;
        });
        result.on('end', function () {
            if ((result.statusCode >= 200) && (result.statusCode < 300)) {
                callback({ error: false, response: body, headers: result.headers });
            }
            else {
                callback({ error: true, response: body, headers: result.headers });
            }
        });
    });
    req.on('error', function (error) {
        callback({ error: true, response: error });
    });
    if (requestConfig.body != null) {
        req.write(requestConfig.body);
    }
    req.end();
}
/**
 * Retrieve a record from CRM
 * @param apiConfig WebApiConfig object
 * @param entityType Type of entity to retrieve
 * @param id Id of record to retrieve
 * @param queryString OData query string parameters
 * @param queryOptions Various query options for the query
 */
function retrieve(apiConfig, entitySet, id, queryString, queryOptions) {
    return webApi.retrieve(apiConfig, entitySet, id, submitRequest, queryString, queryOptions);
}
exports.retrieve = retrieve;
/**
 * Retrieve multiple records from CRM
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to retrieve
 * @param queryString OData query string parameters
 * @param queryOptions Various query options for the query
 */
function retrieveMultiple(apiConfig, entitySet, queryString, queryOptions) {
    return webApi.retrieveMultiple(apiConfig, entitySet, submitRequest, queryString, queryOptions);
}
exports.retrieveMultiple = retrieveMultiple;
/**
 * Retrieve next page from a retrieveMultiple request
 * @param apiConfig WebApiConfig object
 * @param url Query from the @odata.nextlink property of a retrieveMultiple
 * @param queryOptions Various query options for the query
 */
function retrieveMultipleNextPage(apiConfig, queryUrl, queryOptions) {
    return webApi.retrieveMultipleNextPage(apiConfig, queryUrl, submitRequest, queryOptions);
}
exports.retrieveMultipleNextPage = retrieveMultipleNextPage;
/**
 * Create a record in CRM
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to create
 * @param entity Entity to create
 * @param queryOptions Various query options for the query
 */
function create(apiConfig, entitySet, entity, queryOptions) {
    return webApi.create(apiConfig, entitySet, entity, submitRequest, queryOptions);
}
exports.create = create;
/**
 * Create a record in CRM and return data
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to create
 * @param entity Entity to create
 * @param select Select odata query parameter
 * @param queryOptions Various query options for the query
 */
function createWithReturnData(apiConfig, entitySet, entity, select, queryOptions) {
    return webApi.createWithReturnData(apiConfig, entitySet, entity, select, submitRequest, queryOptions);
}
exports.createWithReturnData = createWithReturnData;
/**
 * Update a record in CRM
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to update
 * @param id Id of record to update
 * @param entity Entity fields to update
 * @param queryOptions Various query options for the query
 */
function update(apiConfig, entitySet, id, entity, queryOptions) {
    return webApi.update(apiConfig, entitySet, id, entity, submitRequest, queryOptions);
}
exports.update = update;
/**
 * Create a record in CRM and return data
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to create
 * @param id Id of record to update
 * @param entity Entity fields to update
 * @param select Select odata query parameter
 * @param queryOptions Various query options for the query
 */
function updateWithReturnData(apiConfig, entitySet, id, entity, select, queryOptions) {
    return webApi.updateWithReturnData(apiConfig, entitySet, id, entity, select, submitRequest, queryOptions);
}
exports.updateWithReturnData = updateWithReturnData;
/**
 * Update a single property of a record in CRM
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to update
 * @param id Id of record to update
 * @param attribute Attribute to update
 * @param queryOptions Various query options for the query
 */
function updateProperty(apiConfig, entitySet, id, attribute, value, queryOptions) {
    return webApi.updateProperty(apiConfig, entitySet, id, attribute, value, submitRequest, queryOptions);
}
exports.updateProperty = updateProperty;
/**
 * Delete a record from CRM
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to delete
 * @param id Id of record to delete
 */
function deleteRecord(apiConfig, entitySet, id) {
    return webApi.deleteRecord(apiConfig, entitySet, id, submitRequest);
}
exports.deleteRecord = deleteRecord;
/**
 * Delete a property from a record in CRM. Non navigation properties only
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to update
 * @param id Id of record to update
 * @param attribute Attribute to delete
 */
function deleteProperty(apiConfig, entitySet, id, attribute) {
    return webApi.deleteProperty(apiConfig, entitySet, id, attribute, submitRequest);
}
exports.deleteProperty = deleteProperty;
/**
 * Associate two records
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity for primary record
 * @param id Id of primary record
 * @param relationship Schema name of relationship
 * @param relatedEntitySet Type of entity for secondary record
 * @param relatedEntityId Id of secondary record
 * @param queryOptions Various query options for the query
 */
function associate(apiConfig, entitySet, id, relationship, relatedEntitySet, relatedEntityId, queryOptions) {
    return webApi.associate(apiConfig, entitySet, id, relationship, relatedEntitySet, relatedEntityId, submitRequest, queryOptions);
}
exports.associate = associate;
/**
 * Disassociate two records
 * @param apiConfig WebApiConfig obje
 * @param entitySet Type of entity for primary record
 * @param id  Id of primary record
 * @param property Schema name of property or relationship
 * @param relatedEntityId Id of secondary record. Only needed for collection-valued navigation properties
 */
function disassociate(apiConfig, entitySet, id, property, relatedEntityId) {
    return webApi.disassociate(apiConfig, entitySet, id, property, submitRequest, relatedEntityId);
}
exports.disassociate = disassociate;
/**
 * Execute a default or custom bound action in CRM
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to run the action against
 * @param id Id of record to run the action against
 * @param actionName Name of the action to run
 * @param inputs Any inputs required by the action
 * @param queryOptions Various query options for the query
 */
function boundAction(apiConfig, entitySet, id, actionName, inputs, queryOptions) {
    return webApi.boundAction(apiConfig, entitySet, id, actionName, submitRequest, inputs, queryOptions);
}
exports.boundAction = boundAction;
/**
 * Execute a default or custom unbound action in CRM
 * @param apiConfig WebApiConfig object
 * @param actionName Name of the action to run
 * @param inputs Any inputs required by the action
 * @param queryOptions Various query options for the query
 */
function unboundAction(apiConfig, actionName, inputs, queryOptions) {
    return webApi.unboundAction(apiConfig, actionName, submitRequest, inputs, queryOptions);
}
exports.unboundAction = unboundAction;
/**
 * Execute a default or custom bound action in CRM
 * @param apiConfig WebApiConfig object
 * @param entitySet Type of entity to run the action against
 * @param id Id of record to run the action against
 * @param functionName Name of the action to run
 * @param inputs Any inputs required by the action
 * @param queryOptions Various query options for the query
 */
function boundFunction(apiConfig, entitySet, id, functionName, inputs, queryOptions) {
    return webApi.boundFunction(apiConfig, entitySet, id, functionName, submitRequest, inputs, queryOptions);
}
exports.boundFunction = boundFunction;
/**
 * Execute an unbound function in CRM
 * @param apiConfig WebApiConfig object
 * @param functionName Name of the action to run
 * @param inputs Any inputs required by the action
 * @param queryOptions Various query options for the query
 */
function unboundFunction(apiConfig, functionName, inputs, queryOptions) {
    return webApi.unboundFunction(apiConfig, functionName, submitRequest, inputs, queryOptions);
}
exports.unboundFunction = unboundFunction;
/**
 * Execute a batch operation in CRM
 * @param apiConfig WebApiConfig object
 * @param batchId Unique batch id for the operation
 * @param changeSetId Unique change set id for any changesets in the operation
 * @param changeSets Array of change sets (create or update) for the operation
 * @param batchGets Array of get requests for the operation
 * @param queryOptions Various query options for the query
 */
function batchOperation(apiConfig, batchId, changeSetId, changeSets, batchGets, queryOptions) {
    return webApi.batchOperation(apiConfig, batchId, changeSetId, changeSets, batchGets, submitRequest, queryOptions);
}
exports.batchOperation = batchOperation;
