"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.areGuidsEqual = exports.parseGuid = exports.WebApiConfig = void 0;
var WebApiConfig = /** @class */ (function () {
    /**
     * Constructor
     * @param config WebApiConfig
     */
    function WebApiConfig(version, accessToken, url) {
        // If URL not provided, get it from Xrm.Context
        if (url == null) {
            var context = typeof GetGlobalContext !== 'undefined' ? GetGlobalContext() : Xrm.Utility.getGlobalContext();
            url = context.getClientUrl() + "/api/data/v" + version;
            this.url = url;
        }
        else {
            this.url = url + "/api/data/v" + version;
            this.url = this.url.replace('//', '/');
        }
        this.version = version;
        this.accessToken = accessToken;
    }
    return WebApiConfig;
}());
exports.WebApiConfig = WebApiConfig;
/**
 * Parse GUID by removing curly braces and converting to uppercase
 * @param id GUID to parse
 */
function parseGuid(id) {
    if (id === null || id === 'undefined' || id === '') {
        return '';
    }
    id = id.replace(/[{}]/g, '');
    if (/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(id)) {
        return id.toUpperCase();
    }
    else {
        throw Error("Id " + id + " is not a valid GUID");
    }
}
exports.parseGuid = parseGuid;
/**
 * Check if two GUIDs are equal
 * @param id1 GUID 1
 * @param id2 GUID 2
 */
function areGuidsEqual(id1, id2) {
    try {
        id1 = parseGuid(id1);
        id2 = parseGuid(id2);
        if (id1 === null || id2 === null || id1 === undefined || id2 === undefined || id1 === '' || id2 === '') {
            return false;
        }
        return id1.toLowerCase() === id2.toLowerCase();
    }
    catch (ex) {
        return false;
    }
}
exports.areGuidsEqual = areGuidsEqual;
